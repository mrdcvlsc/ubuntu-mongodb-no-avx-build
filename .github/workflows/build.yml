name: builds

on:
    push:
      branches:
        - '**'
    pull_request:

# on:
#   push:
#     tags:
#       - 'v*'

jobs:
  build:
    permissions: write-all

    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        # - { name: Windows VS2019, os: windows-2019,   binfolder: .\\build\\bin\\Release, zipped: windows-build-VS19.zip,  zipper: 7z a -tzip }
        # - { name: Windows VS2022, os: windows-2022,   binfolder: .\\build\\bin\\Release, zipped: windows-build-VS22.zip,  zipper: 7z a -tzip }
        # - { name: Windows Clang,  os: windows-latest, binfolder: .\\build\\bin\\Release, zipped: windows-build-clang.zip, zipper: 7z a -tzip, flags: -G "Unix Makefiles" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        # - { name: Windows GCC,    os: windows-latest, binfolder: .\\build\\bin\\Release, zipped: windows-build-gcc.zip,   zipper: 7z a -tzip, flags: -G "Unix Makefiles" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ }
        # - { name: MacOS XCode,    os: macos-latest,   binfolder: ./build/bin,            zipped: mac-build.zip,           zipper: zip,       }
        - { name: Linux GCC,      os: ubuntu-latest,  binfolder: ./mongo-r8.0.4/build,            zipped: ubuntu-build-gcc.zip,    zipper: zip -r,       }
        # - { name: Linux Clang,    os: ubuntu-latest,  binfolder: ./build/bin,            zipped: ubuntu-build-clang.zip,  zipper: zip -r,        flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }

    steps:

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Make Script An build
      run: chmod +x ubuntu-mongodb.sh

    - name: Run Script
      run: ./ubuntu-mongodb.sh

    - name: Compress ${{matrix.platform.binfolder}} folder
      run: ${{matrix.platform.zipper}} ${{matrix.platform.zippped}} ${{matrix.platform.binfolder}}

    - name: Create github release and upload ${{matrix.platform.zippped}}
      continue-on-error: true
      run: gh release create ${{github.ref_name}} ${{matrix.platform.zippped}} --title "${{github.ref_name}}" --notes "Release notes for ${{github.ref_name}}" --draft=false --prerelease=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload ${{matrix.platform.zippped}} to release
      continue-on-error: true
      run: gh release upload ${{github.ref_name}} ${{matrix.platform.zippped}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}